#!/usr/bin/env python3
"""
Port Configuration Utility
Set custom ports for backend and frontend servers
"""

import os
import sys
import argparse

def set_environment_vars(backend_port=None, frontend_port=None, spreadsheet_name=None, sheet_name=None, auto_open=None):
    """Set environment variables for the workout app"""

    env_vars = {}

    if backend_port:
        env_vars['BACKEND_PORT'] = str(backend_port)

    if frontend_port:
        env_vars['FRONTEND_PORT'] = str(frontend_port)

    if spreadsheet_name:
        env_vars['SPREADSHEET_NAME'] = spreadsheet_name

    if sheet_name:
        env_vars['SHEET_NAME'] = sheet_name

    if auto_open is not None:
        env_vars['AUTO_OPEN_BROWSER'] = 'True' if auto_open else 'False'

    # Write to .env file
    env_file = '.env'
    existing_vars = {}

    # Read existing .env file
    if os.path.exists(env_file):
        with open(env_file, 'r') as f:
            for line in f:
                line = line.strip()
                if line and '=' in line and not line.startswith('#'):
                    key, value = line.split('=', 1)
                    existing_vars[key] = value

    # Update with new values
    existing_vars.update(env_vars)

    # Write back to .env file
    with open(env_file, 'w') as f:
        f.write("# Workout App Configuration\n")
        f.write("# Generated by set_ports.py\n\n")

        for key, value in existing_vars.items():
            f.write(f"{key}={value}\n")

    print(f"‚úÖ Configuration saved to {env_file}")

    # Show current configuration
    from config import print_config
    print("\nüìã Current Configuration:")
    print_config()

    return env_vars

def load_env_file():
    """Load environment variables from .env file"""
    env_file = '.env'
    if os.path.exists(env_file):
        with open(env_file, 'r') as f:
            for line in f:
                line = line.strip()
                if line and '=' in line and not line.startswith('#'):
                    key, value = line.split('=', 1)
                    os.environ[key] = value

def main():
    parser = argparse.ArgumentParser(
        description="Configure ports and settings for the Workout App",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  %(prog)s --backend 5002 --frontend 8012     # Set custom ports
  %(prog)s --spreadsheet "My Gym Log"         # Set custom spreadsheet name
  %(prog)s --sheet "data"                     # Set custom sheet name
  %(prog)s --auto-open                        # Enable auto-open browser
  %(prog)s --show                             # Show current configuration
  %(prog)s --reset                            # Reset to defaults
        """
    )

    parser.add_argument('--backend', '-b', type=int, help='Backend API port (default: 5001)')
    parser.add_argument('--frontend', '-f', type=int, help='Frontend server port (default: 8010)')
    parser.add_argument('--spreadsheet', '-s', help='Google Sheets spreadsheet name (default: "Gym workout")')
    parser.add_argument('--sheet', help='Sheet name within spreadsheet (default: "raw")')
    parser.add_argument('--auto-open', action='store_true', help='Auto-open browser when starting')
    parser.add_argument('--no-auto-open', action='store_true', help='Disable auto-open browser')
    parser.add_argument('--show', action='store_true', help='Show current configuration')
    parser.add_argument('--reset', action='store_true', help='Reset to default configuration')

    args = parser.parse_args()

    # Load existing environment
    load_env_file()

    if args.show:
        print("üìã Current Configuration:")
        from config import print_config
        print_config()
        return

    if args.reset:
        if os.path.exists('.env'):
            os.remove('.env')
            print("‚úÖ Configuration reset to defaults")
        else:
            print("‚ÑπÔ∏è No configuration file to reset")
        return

    # Validate ports
    if args.backend and (args.backend < 1024 or args.backend > 65535):
        print("‚ùå Backend port must be between 1024 and 65535")
        sys.exit(1)

    if args.frontend and (args.frontend < 1024 or args.frontend > 65535):
        print("‚ùå Frontend port must be between 1024 and 65535")
        sys.exit(1)

    if args.backend and args.frontend and args.backend == args.frontend:
        print("‚ùå Backend and frontend ports must be different")
        sys.exit(1)

    # Determine auto-open setting
    auto_open = None
    if args.auto_open:
        auto_open = True
    elif args.no_auto_open:
        auto_open = False

    # Set configuration
    set_environment_vars(
        backend_port=args.backend,
        frontend_port=args.frontend,
        spreadsheet_name=args.spreadsheet,
        sheet_name=args.sheet,
        auto_open=auto_open
    )

    print("\nüí° Restart the servers for changes to take effect:")
    print("   python start_system.py")

if __name__ == "__main__":
    main()