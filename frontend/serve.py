#!/usr/bin/env python3
"""
Simple HTTP server for the frontend
Serves static files for the workout app frontend
"""

import http.server
import socketserver
import os
import sys
from pathlib import Path

# Get the directory where this script is located
FRONTEND_DIR = Path(__file__).parent

# Import configuration from parent directory
sys.path.append(str(Path(__file__).parent.parent))
from config import FRONTEND_PORT, FRONTEND_URL, BACKEND_URL

class CustomHTTPRequestHandler(http.server.SimpleHTTPRequestHandler):
    def __init__(self, *args, **kwargs):
        super().__init__(*args, directory=str(FRONTEND_DIR), **kwargs)

    def end_headers(self):
        # Add CORS headers for development
        self.send_header('Access-Control-Allow-Origin', '*')
        self.send_header('Access-Control-Allow-Methods', 'GET, POST, OPTIONS')
        self.send_header('Access-Control-Allow-Headers', 'Content-Type')
        super().end_headers()

    def do_GET(self):
        # Handle dynamic config.js generation
        if self.path == '/js/config.js':
            self.serve_config_js()
        else:
            super().do_GET()

    def serve_config_js(self):
        """Dynamically generate config.js with current configuration"""
        from config import API_BASE_URL, BACKEND_URL, FRONTEND_URL

        config_content = f"""/**
 * Frontend Configuration (Dynamically Generated)
 * This file is generated by the server with current port configuration
 */

window.CONFIG = {{
    API_BASE_URL: '{API_BASE_URL}',
    BACKEND_URL: '{BACKEND_URL}',
    FRONTEND_URL: '{FRONTEND_URL}'
}};

console.log('üîß Loaded configuration:', window.CONFIG);
"""

        # Send response
        self.send_response(200)
        self.send_header('Content-type', 'application/javascript')
        self.end_headers()
        self.wfile.write(config_content.encode('utf-8'))

def main():
    os.chdir(FRONTEND_DIR)

    with socketserver.TCPServer(("", FRONTEND_PORT), CustomHTTPRequestHandler) as httpd:
        print(f"üöÄ Frontend server starting...")
        print(f"üì± Open {FRONTEND_URL} in your browser")
        print(f"üìÅ Serving files from: {FRONTEND_DIR}")
        print(f"\nüí° Make sure the backend API is running on {BACKEND_URL}")
        print("   Start it with: python backend_api.py")
        print("\nPress Ctrl+C to stop the server")

        try:
            httpd.serve_forever()
        except KeyboardInterrupt:
            print("\nüëã Frontend server stopped")

if __name__ == "__main__":
    main()
